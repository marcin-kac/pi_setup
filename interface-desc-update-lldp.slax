version 1.0;
ns junos = "http://xml.juniper.net/junos/*/junos";
ns xnm = "http://xml.juniper.net/xnm/1.1/xnm";
ns jcs = "http://xml.juniper.net/junos/commit-scripts/1.0";

/* import "../import/junos.xsl"; */

/* Embedded event policy */
var $event-definition = {
        <event-options> {
                <generate-event> {
                        <name> "interface-desc-update-lldp";
                        <time-interval> "86400";
                }
                <policy> {
                        <name> "interface-desc-update-lldp";
                        <events> "interface-desc-update-lldp";
                        <then> {
                                <event-script> {
                                        <name> "interface-desc-update-lldp.slax";
                        }
                        }
                }
        }
}

/*
 * Open connection with mgd
 */

var $con = jcs:open();

match / {
    <event-script-results> {

        /************************************************************
        *   Script is to update interface descriptions based on  
        *   lldp neighbor information.
        *   
        *   During each script run the LLDP neighbor information along
        *   with the interface configuration will be pulled.  The current 
        *   interface description will be compared to what the new description
        *   would be based on the LLDP neighbor information.  If the
        *   descriptions are the same then no additional action will be 
        *   taken.  If the new description is different from the one that is
        *   already configured then the updated description will be committed.
        *
        *   Currently the script only adds/updates an interface description
        *   based on the LLDP neighbor information.  The interface descriptions
        *   will not be removed if the LLDP neighborship goes away.
        *   
        *   
        *   *****************************************************
        *
        *   INSTRUCTIONS TO RUN AS AN EVENT SCRIPT:
        *
        *   To install the script on a router copy the "interface-desc-update-lldp.slax" file to /var/db/scripts/event
        *   if there are multiple routing engines in the platform then the file should be 
        *   copied to that directory on both routing engines
        *
        *   Sample configuration to have the script run every 60 seconds is below:
        *
        *   event-options {
        *       generate-event {
        *           INT-DESC-UPDATE time-interval 60;
        *       }
        *       policy INT-DESC-UPDATE {
        *           events INT-DESC-UPDATE;
        *           then {
        *               event-script interface-desc-update-lldp.slax;
        *           }
        *       }
        *       event-script {
        *           file interface-desc-update-lldp.slax;
        *       }
        *   }
        *
        *   
        *
        ************************************************************/
        expr jcs:sleep( 300 );
        if (not($con)) {
            expr jcs:syslog("daemon.error", "corrective-action: **SCRIPT FAIL** Not able to connect to local mgd");
        }
        else {
            var $re_status = { call is_master(); }
            /*
            * only run this script on the master RE
            */
            if ($re_status == "master") {
                
                /* get the LLDP neighbor information */
                var $command-1-rpc = <get-lldp-neighbors-information>;
                var $command-1-output = jcs:execute($con, $command-1-rpc);
                
                /* get the interface configuration information */
                var $configuration-rpc = {
                    <get-configuration database="committed"> {
                        <configuration> {
                            <interfaces>;
                            }
                        }                   
                }

                var $configuration-out = jcs:execute($con, $configuration-rpc);
                /* build updated interface descriptions as needed */
                var $description-config := {
                    /* get device hostname and platform as QFX3500 and 5100 RPC syntax differs */
                    var $get-software-info-command = <get-software-information>;
                    var $get-software-info-output = jcs:execute($con, $get-software-info-command);

                    /* QFX5100 have multi-routing-engine-item */
                    mvar $platform = $get-software-info-output/multi-routing-engine-item/software-information/product-model;
                    mvar $hostname = $get-software-info-output/multi-routing-engine-item/software-information/host-name;
                    /* If its a QFX3500 then the RPC output is slightly different due to multi-routing-engine */
                    if (jcs:empty ( $platform )) {
                      set $platform = $get-software-info-output/product-model;
                      set $hostname = $get-software-info-output/host-name;
                        }

                    /* get basic LLDP neighbor information for each lldp neighbor */
                    for-each ($command-1-output/lldp-neighbor-information) {

                        /* get local interface from local-interface or local-port-id - strip .0 */
                        mvar $local-interface-raw = ./lldp-local-interface;
                        if (jcs:empty ( $local-interface-raw )) {
                            set $local-interface-raw = ./lldp-local-port-id;
                        }
                        var $local-interface-split = jcs:split("\\.", $local-interface-raw);
                        var $local-interface = $local-interface-split[1];

                        /* get remote router name from remote-system-name - strip .amazon.com off */
                        var $remote-system-name-raw = ./lldp-remote-system-name;
                        var $remote-system-name-split = jcs:split("\\.", $remote-system-name-raw, 2);
                        var $remote-system-name = $remote-system-name-split[1];

                        /* Determine the remote interface name from remote-port-description or remote-port-id*/
                        mvar $remote-port-description = ./lldp-remote-port-description;

                        /* Call extensive command to get remote-port-id - syntax is different on QFX3500 and EX4XXXs*/
                        mvar $command-2-rpc = <get-lldp-interface-neighbors> {
                                <interface-device> $local-interface;
                        }
                        if (contains($platform, "qfx3500") or contains($platform, "ex4550") or contains($platform, "ex4600")) {
                            set $command-2-rpc = <get-lldp-interface-neighbors-information> {
                                <interface-name> $local-interface;
                            }
                        }
                        var $command-2-output = jcs:execute($con, $command-2-rpc);
                        var $remote-port-id = $command-2-output/lldp-neighbor-information/lldp-remote-port-id;

                        /* if remote-port-id contains "Eth" or "xe" or "et" then it must be NXOS 6.x or JUNOS, so we use remote-port-id */
                        if (contains($remote-port-id, "Eth") or contains($remote-port-id, "xe-") or contains($remote-port-id, "et-")) {
                            set $remote-port-description = $remote-port-id;
                        }

                        /* Strip sub int from remote port */
                        var $remote-interface-split = jcs:split("\\.", $remote-port-description);
                        set $remote-port-description = $remote-interface-split[1];

                        /* Build new description using gathered values */
                        var $description = $hostname _ " " _ $local-interface _ " --> " _ $remote-system-name _ " " _ $remote-port-description;
                        var $current-desc = $configuration-out/interfaces/interface[name=$local-interface]/description;

                        /* remove any newline/whitespace from current and new description so they can be compared */                        
                        var $test-current-desc = translate($current-desc, " \t\n\r", ":");
                        var $test-new-desc = translate($description, " \t\n\r", ":");                       
                        
                        /* if current and new description match then generate a syslog and do nothing else for that interface */
                        if ($test-current-desc == $test-new-desc) {
                            expr jcs:syslog("daemon.info", "old desc \"" , $current-desc , "\" matches new \"", $description, "\".  No changes necessary for this interface.");
                        }
                        /* if current and new description don't match then generate config blob to update description for that interface */
                        else {
                            var $int-desc =  {  <interface> {
                                            <name> $local-interface;
                                                <description> $description;
                                            }
                                        }
                            /* copy-of causes the config specified by $int-desc to be pushed to the $description-config variable */
                            copy-of $int-desc;                      
                            expr jcs:syslog("daemon.info", "old desc " , $current-desc , "doesn't match new ", $description);
                        }                       
                    }
                 }
                if (jcs:empty ( $description-config )) {
                
                }
                else {
                    /* create the config specified under variable $change-req.  This includes the config specified by $description-config in addition*/
                    /* to the before and after config sections required by syntax */
                    var $change-req = { <load-configuration> {
                                <configuration> {   
                                    <interfaces> {
                                        copy-of $description-config;
                                }
                            }
                        }
                    }
                    /* used the copy-of below just to see my syntax to debug script */
                    /* copy-of $change-req;*/
                    call update-config($connection=$con, $change-req=$change-req, $n="0");
                } 
            }
            else {
                expr jcs:syslog("daemon.info", "corrective-action: not master so nothing to do");
            }           
        }
    }
}

template is_master() {
    var $re = jcs:invoke("get-route-engine-information");
    /*
     * if there is only one RE then is has to be master
     */
    if (count($re/route-engine) == 1) {
        <output> "master";
    }
    /* if there is more than one RE this XPath statement is only true on the master RE */
    else if ($re/route-engine[mastership-state == "master"]/load-average-one) {
        <output> "master";
    }
    else {
        <output> "backup";
    }
}

/* Template used to update the configuration.  Will lock the config during configuration changes */

template update-config($connection, $change-req, $n) {
    expr jcs:syslog("external.debug", "update-config");
    var $open-req = <lock-configuration>;
    var $res-open = jcs:execute($connection, $open-req);
    var $res-openlockcheck = $res-open;
        if (contains($res-openlockcheck, "configuration database locked by")) {
            if ($n <= 7) { /* trying 40 seconds */
                expr jcs:syslog("user.warning", "configuration database locked while attempting to modify interface descriptions - try number ", $n+1);
                expr jcs:sleep(5);
                call update-config($connection=$connection, $change-req=$change-req, $n=$n+1);
            }
            else {
                /* if the configuration remained locked the entire time the script was running and the */
            }
        } else {
            if ($res-open//xnm:error) {
                for-each ($res-open//xnm:error) {
                    expr jcs:syslog("external.error", "Error: Open configuration: ", message); 
                }
            } else {
                var $res-load = jcs:execute($connection, $change-req);
                    if ($res-load//xnm:error) {
                        expr jcs:execute($connection, "close-configuration");
                        for-each ($res-load//xnm:error) {
                            expr jcs:syslog("external.error", "Error: Load configuration: ", message); 
                        }
                        if (jcs:regex("configuration database locked by", $res-load//xnm:error/message)) {
                            if ($n <= 7) { /* trying 40 seconds */
                                expr jcs:syslog("user.warning", "configuration database locked while attempting to modify interface descriptions - try number ", $n+1);
                                expr jcs:sleep(5);
                                call update-config($connection=$connection, $change-req=$change-req, $n=$n+1);
                            }
                            else {
                                /* if the configuration remained locked the entire time the script was running and the */
                            }
                        }
                    } else {
                        var $res-commit = jcs:execute($connection, "commit-configuration");
                        expr jcs:execute($connection, "close-configuration");
                        if ($res-commit//xnm:error) {
                            for-each ($res-commit//xnm:error) {
                                expr jcs:syslog("external.error", "Error: Commit: ", message); 
                            }
                        if (jcs:regex("configuration database locked by", $res-commit//xnm:error/message)) {
                            if ($n <= 7) { /* trying 40 seconds */
                                expr jcs:syslog("user.warning", "configuration database locked while attempting to modify interface descriptions - try number ", $n+1);
                                expr jcs:sleep(5);
                                call update-config($connection=$connection, $change-req=$change-req, $n=$n+1);
                            }
                            else {
                                /* if the configuration remained locked the entire time the script was running and the */
                            }
                        }
                        } else {
                            expr jcs:syslog("user.warning", "interface-desc-update-lldp.slax[Success]: Interface description update has been successful");
                        }
                    }
                }
            }
}
